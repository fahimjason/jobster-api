version: "3.9"
services:
  # Frontend =======================
  client:
    container_name: client
    # Build the Dockerfile from the current directory
    build:
      context: ./client
      dockerfile: Dockerfile
    # Expose port 3000
    ports:
      - "3001:3000"
    # Volumes for hot-reloading
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_URL=http://54.227.58.190:5002/api/v1
      - JAEGER_URL=http://jaeger:4318
    depends_on:
      - mongodb
      - backend
    restart: always

  # Backend ======================
  backend:
    container_name: backend
    # Build the Dockerfile from the current directory
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Expose port 3000
    ports:
      - "5002:5000"
    # Volumes for hot-reloading
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      NODE_OPTIONS: "--require ./tracer.js"
      MONGO_URI: mongodb://admin:password@mongodb:27017/hackathon
      JWT_SECRET: serect
      JWT_LIFETIME: 30d
    depends_on:
      - mongodb
    restart: always

  # Database ====================
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017"
    volumes:
      - ./data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    restart: always
  
  # MySQL Database
  mariadb:
    image: mariadb:latest
    container_name: mariadb
    ports:
      - "33066:3306"
    environment:
      MYSQL_ROOT_PASSWORD: cphr1AOtimmmscw6jKPc
      MYSQL_USER: oninjas
      MYSQL_PASSWORD: cphr1AOtimmmscw6jKPc
      MYSQL_DATABASE: ninjas
    volumes:
      - db_data:/var/lib/mysql
    restart: always
  
  # Redis Server
  redis:
    container_name: redis
    image: redis:alpine3.16
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ob@ninjas
    restart: always

  # kafka Clusturs
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    restart: always
  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    restart: always
  # Kafka Dashboard
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: Beeda-Kafka-Cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    restart: always

  # Jaeger
  ## http://jaeger:4318
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:${JAEGER_VERSION:-latest}
    ports:
      - "16686:16686"
      - "4319:4318"
    environment:
      - LOG_LEVEL=debug
    restart: always
  
  # Grafana Tempo
  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
      - "9411:9411"   # zipkin
    restart: always
  # prometheus
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    restart: always
  # grafana
  grafana:
    container_name: grafana
    image: grafana/grafana:10.2.2
    volumes:
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    ports:
      - "3000:3000"
    restart: always

  # Prometheus 
  # http://rometheus:9090
  # prometheus:
  #   image: prom/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   volumes:
  #     - ./prometheus/:/etc/prometheus/
  #   ports:
  #     - 9090:9090  
  #   restart: always

# Docker Network
## docker network create microservices
networks:
  default:
    external:
      name: microservices